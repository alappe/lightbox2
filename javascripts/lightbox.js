// Generated by CoffeeScript 1.3.3

/*
Lightbox

Based on Lightbox v2.51 by Lokesh Dhakar - http://www.lokeshdhakar.com
For more information, visit: http://lokeshdhakar.com/projects/lightbox2/

Licensed under the Creative Commons Attribution 2.5 License - http://creativecommons.org/licenses/by/2.5/
- free for use in both personal and commercial projects
- attribution requires leaving author name, author link, and the license info intact

Thanks
- Scott Upton(uptonic.com), Peter-Paul Koch(quirksmode.com), and Thomas Fuchs(mir.aculo.us) for ideas, libs, and snippets.
- Artemy Tregubenko (arty.name) for cleanup and help in updating to latest proto-aculous in v2.05.
*/


(function() {
  var $, Lightbox;

  $ = jQuery;

  Lightbox = (function() {

    function Lightbox(options) {
      this.options = options;
      this.album = [];
      this.currentImageIndex = void 0;
      this.init();
    }

    Lightbox.prototype.init = function() {
      this.enable();
      return this.build();
    };

    Lightbox.prototype.enable = function() {
      var _this = this;
      return $('body').on('click', 'a[data-lightbox="lightbox"], area[data-lightbox="lightbox"]', function(e) {
        _this.start($(e.currentTarget));
        return false;
      });
    };

    Lightbox.prototype.build = function() {
      var $lightbox, markup,
        _this = this;
      markup = '<div id="lightboxOverlay"></div>\n  <div id="lightbox">\n    <div class="lb-outerContainer">\n      <div class="lb-dataContainer">\n        <div class="lb-data">\n          <a href="#" class="lb-close"></a>\n          <div class="lb-nav hidden">\n            <a href="#" class="lb-prev"></a>\n            <span class="lb-center"></span>\n            <a href="#" class="lb-next"></a>\n          </div>\n          <div class="lb-details">\n            <span class="lb-caption"></span>\n            <span class="lb-number"></span>\n          </div>\n        </div>\n      </div>\n      <div class="lb-container">\n          <img class="lb-image" />\n          <div class="lb-loader"></div>\n      </div>\n    </div>\n  </div>\n</div>';
      $(markup).appendTo($('body'));
      $('#lightboxOverlay').hide().on('click', function(e) {
        _this.end();
        return false;
      });
      $lightbox = $('#lightbox');
      $lightbox.hide().on('click', function(e) {
        if ($(e.target).attr('id') === 'lightbox') {
          _this.end();
        }
        return false;
      });
      $lightbox.find('.lb-outerContainer').on('click', function(e) {
        if ($(e.target).attr('id') === 'lightbox') {
          _this.end();
        }
        return false;
      });
      ($lightbox.find('.lb-prev, .lb-next, .lb-close')).on('mousedown', function(e) {
        return ($(this)).addClass('clicked');
      });
      ($lightbox.find('.lb-prev, .lb-next, .lb-close')).on('mouseup', function(e) {
        return ($(this)).removeClass('clicked');
      });
      $lightbox.find('.lb-prev').on('click', function(e) {
        if (_this.options.loop && _this.currentImageIndex === 0) {
          _this.changeImage(_this.album.length - 1);
        } else {
          _this.changeImage(_this.currentImageIndex - 1);
        }
        return false;
      });
      $lightbox.find('.lb-next').on('click', function(e) {
        if (_this.options.loop && _this.currentImageIndex === (_this.album.length - 1)) {
          _this.changeImage(0);
        } else {
          _this.changeImage(_this.currentImageIndex + 1);
        }
        return false;
      });
      $lightbox.find('.lb-loader, .lb-close').on('click', function(e) {
        _this.end();
        return false;
      });
    };

    Lightbox.prototype.start = function($link) {
      var $lightbox, $window, a, i, imageNumber, left, top, _i, _len, _ref;
      $('select, object, embed').css({
        visibility: 'hidden'
      });
      $('#lightboxOverlay').fadeIn(this.options.fadeDuration);
      this.album = [];
      imageNumber = 0;
      if (($link.attr('data-lightbox-group')) != null) {
        _ref = $($link.prop('tagName') + '[data-lightbox-group="' + ($link.attr('data-lightbox-group')) + '"]');
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          a = _ref[i];
          this.album.push({
            link: $(a).attr('href'),
            title: $(a).attr('title')
          });
          if ($(a).attr('href') === $link.attr('href')) {
            imageNumber = i;
          }
        }
      } else {
        this.album.push({
          link: $link.attr('href'),
          title: $link.attr('title')
        });
      }
      $window = $(window);
      top = $window.scrollTop() + $window.height() / 10;
      left = $window.scrollLeft();
      $lightbox = $('#lightbox');
      $lightbox.css({
        top: top + 'px',
        left: left + 'px'
      }).fadeIn(this.options.fadeDuration);
      this.changeImage(imageNumber);
    };

    Lightbox.prototype.changeImage = function(imageNumber) {
      var $image, $lightbox, preloader,
        _this = this;
      this.disableKeyboardNav();
      $lightbox = $('#lightbox');
      $image = $lightbox.find('.lb-image');
      $('#lightboxOverlay').fadeIn(this.options.fadeDuration);
      $('.loader').fadeIn('slow');
      ($lightbox.find('.lb-image')).hide();
      ($lightbox.find('.lb-outerContainer')).addClass('animating');
      preloader = new Image();
      preloader.onload = function() {
        $image.attr('src', _this.album[imageNumber].link);
        $image.width = preloader.width;
        $image.height = preloader.height;
        return _this.sizeContainer(preloader.width, preloader.height);
      };
      preloader.src = this.album[imageNumber].link;
      this.currentImageIndex = imageNumber;
    };

    Lightbox.prototype.sizeContainer = function(imageWidth, imageHeight) {
      var $container, $dataContainer, $lightbox, $outerContainer, containerBottomPadding, containerLeftPadding, containerRightPadding, containerTopPadding, dataContainerHeight, newHeight, newWidth, oldHeight, oldWidth,
        _this = this;
      $lightbox = $('#lightbox');
      $outerContainer = $lightbox.find('.lb-outerContainer');
      oldWidth = $outerContainer.outerWidth();
      oldHeight = $outerContainer.outerHeight();
      $container = $lightbox.find('.lb-container');
      containerTopPadding = parseInt($container.css('padding-top'), 10);
      containerRightPadding = parseInt($container.css('padding-right'), 10);
      containerBottomPadding = parseInt($container.css('padding-bottom'), 10);
      containerLeftPadding = parseInt($container.css('padding-left'), 10);
      $dataContainer = $lightbox.find('.lb-dataContainer');
      dataContainerHeight = $dataContainer.outerHeight();
      newWidth = imageWidth + containerLeftPadding + containerRightPadding;
      newHeight = imageHeight + containerTopPadding + containerBottomPadding + dataContainerHeight;
      if (newWidth !== oldWidth && newHeight !== oldHeight) {
        $outerContainer.animate({
          width: newWidth,
          height: newHeight
        }, this.options.resizeDuration, 'swing');
      } else if (newWidth !== oldWidth) {
        $outerContainer.animate({
          width: newWidth
        }, this.options.resizeDuration, 'swing');
      } else if (newHeight !== oldHeight) {
        $outerContainer.animate({
          height: newHeight
        }, this.options.resizeDuration, 'swing');
      }
      setTimeout(function() {
        $lightbox.find('.lb-dataContainer').width(newWidth);
        _this.showImage();
      }, this.options.resizeDuration);
    };

    Lightbox.prototype.showImage = function() {
      var $lightbox;
      $lightbox = $('#lightbox');
      $lightbox.find('.lb-loader').hide();
      $lightbox.find('.lb-image').fadeIn('slow');
      this.updateNav();
      this.updateDetails();
      this.preloadNeighboringImages();
      this.enableKeyboardNav();
    };

    Lightbox.prototype.updateNav = function() {
      var $lightbox;
      $lightbox = $('#lightbox');
      if (this.album.length > 1) {
        $lightbox.find('.lb-nav').show();
      }
    };

    Lightbox.prototype.updateDetails = function() {
      var $lightbox, labelText, link, title;
      $lightbox = $('#lightbox');
      if ((typeof this.album[this.currentImageIndex].title !== 'undefined') && (this.album[this.currentImageIndex].title !== '') && (this.options.label !== false)) {
        switch (this.options.label) {
          case 'title':
            title = this.album[this.currentImageIndex].title;
            labelText = title != null ? title : '';
            break;
          case 'filename':
            link = this.album[this.currentImageIndex].link;
            labelText = link.replace(/.*\/([^\/]+)$/, '$1');
        }
        (($lightbox.find('.lb-caption')).html(labelText)).fadeIn('fast');
      }
      $lightbox.find('.lb-outerContainer').removeClass('animating');
      $lightbox.find('.lb-dataContainer').fadeIn(this.resizeDuration);
    };

    Lightbox.prototype.preloadNeighboringImages = function() {
      var preloadNext, preloadPrev;
      if (this.album.length > this.currentImageIndex + 1) {
        preloadNext = new Image();
        preloadNext.src = this.album[this.currentImageIndex + 1].link;
      } else if (this.options.loop && this.album.length > 1) {
        preloadNext = new Image();
        preloadNext.src = this.album[0].link;
      }
      if (this.currentImageIndex > 0) {
        preloadPrev = new Image();
        preloadPrev.src = this.album[this.currentImageIndex - 1].link;
      } else if (this.options.loop && this.album.length > 1) {
        preloadNext = new Image();
        preloadNext.src = this.album[this.album.length - 1].link;
      }
    };

    Lightbox.prototype.enableKeyboardNav = function() {
      $(document).on('keyup.keyboard', $.proxy(this.keyboardAction, this));
    };

    Lightbox.prototype.disableKeyboardNav = function() {
      $(document).off('.keyboard');
    };

    Lightbox.prototype.keyboardAction = function(event) {
      var KEYCODE_ESC, KEYCODE_LEFTARROW, KEYCODE_RIGHTARROW, key, keycode;
      KEYCODE_ESC = 27;
      KEYCODE_LEFTARROW = 37;
      KEYCODE_RIGHTARROW = 39;
      keycode = event.keyCode;
      key = String.fromCharCode(keycode).toLowerCase();
      if (keycode === KEYCODE_ESC || key.match(/x|o|c/)) {
        this.end();
      } else if (key === 'p' || keycode === KEYCODE_LEFTARROW) {
        if (this.currentImageIndex !== 0) {
          this.changeImage(this.currentImageIndex - 1);
        } else if (this.options.loop) {
          this.changeImage(this.album.length - 1);
        }
      } else if (key === 'n' || keycode === KEYCODE_RIGHTARROW) {
        if (this.currentImageIndex !== this.album.length - 1) {
          this.changeImage(this.currentImageIndex + 1);
        } else if (this.options.loop) {
          this.changeImage(0);
        }
      }
    };

    Lightbox.prototype.end = function() {
      this.disableKeyboardNav();
      $('#lightbox').fadeOut(this.options.fadeDuration);
      $('#lightboxOverlay').fadeOut(this.options.fadeDuration);
      return $('select, object, embed').css({
        visibility: 'visible'
      });
    };

    return Lightbox;

  })();

  $(function() {
    var lightbox;
    return lightbox = new Lightbox({
      resizeDuration: 700,
      fadeDuration: 500,
      labelImage: 'Image',
      labelOf: 'of',
      label: 'filename',
      loop: true
    });
  });

}).call(this);
